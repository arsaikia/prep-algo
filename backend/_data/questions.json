[
  {
    "_id": "61482de5-dc5b-434f-92a8-6127bcb3b0dc",
    "name": "Valid Anagram",
    "link": "valid-anagram/",
    "group": "Arrays & Hashing",
    "difficulty": "Easy",
    "description": "<div>\n  <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p>\n\n  <p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> s = \"anagram\", t = \"nagaram\"\n<strong>Output:</strong> true</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> s = \"rat\", t = \"car\"\n<strong>Output:</strong> false</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>1 <= s.length, t.length <= 50,000</code></li>\n    <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li>\n  </ul>\n\n  <p><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "\"anagram\"",
          "\"nagaram\""
        ],
        "expectedOutput": "true",
        "explanation": "Both strings contain the same characters with the same frequency."
      },
      {
        "inputs": [
          "\"rat\"",
          "\"car\""
        ],
        "expectedOutput": "false",
        "explanation": "The strings contain different characters."
      },
      {
        "inputs": [
          "\"listen\"",
          "\"silent\""
        ],
        "expectedOutput": "true",
        "explanation": "Both strings are anagrams of each other."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "\"anagram\"",
          "\"nagaram\""
        ],
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "inputs": [
          "\"rat\"",
          "\"car\""
        ],
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "inputs": [
          "\"listen\"",
          "\"silent\""
        ],
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "inputs": [
          "\"a\"",
          "\"ab\""
        ],
        "expectedOutput": "false",
        "isHidden": true
      },
      {
        "inputs": [
          "\"abc\"",
          "\"bca\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [
          "\"hello\"",
          "\"bello\""
        ],
        "expectedOutput": "false",
        "isHidden": true
      },
      {
        "inputs": [
          "\"aab\"",
          "\"baa\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [
          "\"\"",
          "\"\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        \"\"\"\n        Check if two strings are anagrams of each other.\n        \n        Args:\n            s: First string\n            t: Second string\n            \n        Returns:\n            bool: True if t is an anagram of s, False otherwise\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "514e10c7-d284-4651-bf40-cb7b2d4cdae3",
    "name": "Two Sum",
    "link": "two-sum/",
    "group": "Arrays & Hashing",
    "difficulty": "Easy",
    "description": "<div>\n  <p>Write a function that takes an array of integers <code>nums</code> and a target sum <code>target</code>. Your task is to find and return the indices of two numbers in the array that add up to the target value.</p>\n\n  <p>Important notes:</p>\n  <ul>\n    <li>Each input array will have exactly one valid solution</li>\n    <li>You cannot use the same element twice (i.e., you can't use nums[i] + nums[i])</li>\n    <li>The order of the returned indices doesn't matter</li>\n  </ul>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> The numbers at indices 0 and 1 (2 and 7) add up to 9.</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> The numbers at indices 1 and 2 (2 and 4) add up to 6.</pre>\n\n  <p><strong>Example 3:</strong></p>\n  <pre><strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Even though both numbers are the same, we can use them because they're at different indices.</pre>\n\n  <p><strong>Example 4:</strong></p>\n  <pre><strong>Input:</strong> nums = [-1,-2,-3,-4,-5], target = -8\n<strong>Output:</strong> [2,4]\n<strong>Explanation:</strong> The numbers at indices 2 and 4 (-3 and -5) add up to -8.</pre>\n\n  <p><strong>Example 5:</strong></p>\n  <pre><strong>Input:</strong> nums = [1000000000,1000000000], target = 2000000000\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Testing with very large numbers that sum to target.</pre>\n\n  <p><strong>Example 6:</strong></p>\n  <pre><strong>Input:</strong> nums = [1,2,3,4,5,6,7,8,9,10], target = 19\n<strong>Output:</strong> [8,9]\n<strong>Explanation:</strong> The numbers at indices 8 and 9 (9 and 10) add up to 19.</pre>\n\n  <p><strong>Example 7:</strong></p>\n  <pre><strong>Input:</strong> nums = [-3,4,3,90], target = 0\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> The numbers at indices 0 and 2 (-3 and 3) add up to 0.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li>The array will have between 2 and 10,000 elements</li>\n    <li>Each number in the array will be between -1 billion and 1 billion</li>\n    <li>The target sum will be between -1 billion and 1 billion</li>\n    <li>There will always be exactly one valid solution</li>\n  </ul>\n\n  <p><strong>Challenge:</strong> Can you solve this problem in less than O(nÂ²) time complexity? In other words, can you avoid using nested loops?</p>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[2,7,11,15]",
          "9"
        ],
        "expectedOutput": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "inputs": [
          "[3,2,4]",
          "6"
        ],
        "expectedOutput": "[1,2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
      },
      {
        "inputs": [
          "[3,3]",
          "6"
        ],
        "expectedOutput": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 6, we return [0, 1]."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[2,7,11,15]",
          "9"
        ],
        "expectedOutput": "[0,1]",
        "isHidden": false
      },
      {
        "inputs": [
          "[3,2,4]",
          "6"
        ],
        "expectedOutput": "[1,2]",
        "isHidden": false
      },
      {
        "inputs": [
          "[3,3]",
          "6"
        ],
        "expectedOutput": "[0,1]",
        "isHidden": false
      },
      {
        "inputs": [
          "[1,2,3,4,5]",
          "9"
        ],
        "expectedOutput": "[3,4]",
        "isHidden": true
      },
      {
        "inputs": [
          "[0,4,3,0]",
          "0"
        ],
        "expectedOutput": "[0,3]",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "e30e4617-c535-4672-8587-193c4d0b5ea3",
    "name": "Group Anagrams",
    "link": "group-anagrams/",
    "group": "Arrays & Hashing",
    "difficulty": "Medium",
    "description": "<div>\n  <p>Given an array of strings <code>strs</code>, group the anagrams together. You can return the answer in <strong>any order</strong>.</p>\n\n  <p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n<strong>Output:</strong> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n<strong>Explanation:</strong> The anagrams are grouped together.</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> strs = [\"\"]\n<strong>Output:</strong> [[\"\"]]\n<strong>Explanation:</strong> Single empty string forms one group.</pre>\n\n  <p><strong>Example 3:</strong></p>\n  <pre><strong>Input:</strong> strs = [\"a\"]\n<strong>Output:</strong> [[\"a\"]]\n<strong>Explanation:</strong> Single character forms one group.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>1 <= strs.length <= 10,000</code></li>\n    <li><code>0 <= strs[i].length <= 100</code></li>\n    <li><code>strs[i]</code> consists of lowercase English letters only.</li>\n  </ul>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]"
        ],
        "expectedOutput": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "Anagrams are grouped together. The order of groups and elements within groups may vary."
      },
      {
        "inputs": [
          "[\"\"]"
        ],
        "expectedOutput": "[[\"\"]]",
        "explanation": "Single empty string forms one group."
      },
      {
        "inputs": [
          "[\"a\"]"
        ],
        "expectedOutput": "[[\"a\"]]",
        "explanation": "Single character forms one group."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]"
        ],
        "expectedOutput": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "isHidden": false
      },
      {
        "inputs": [
          "[\"\"]"
        ],
        "expectedOutput": "[[\"\"]]",
        "isHidden": false
      },
      {
        "inputs": [
          "[\"a\"]"
        ],
        "expectedOutput": "[[\"a\"]]",
        "isHidden": false
      },
      {
        "inputs": [
          "[\"abc\",\"bca\",\"cab\",\"xyz\"]"
        ],
        "expectedOutput": "[[\"abc\",\"bca\",\"cab\"],[\"xyz\"]]",
        "isHidden": true
      },
      {
        "inputs": [
          "[\"hello\",\"world\"]"
        ],
        "expectedOutput": "[[\"hello\"],[\"world\"]]",
        "isHidden": true
      },
      {
        "inputs": [
          "[\"aab\",\"aba\",\"baa\"]"
        ],
        "expectedOutput": "[[\"aab\",\"aba\",\"baa\"]]",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \"\"\"\n        Group anagrams together from a list of strings.\n        \n        Args:\n            strs: List of strings to group\n            \n        Returns:\n            List[List[str]]: List of groups, where each group contains anagrams\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "8a0b50cd-3636-4c33-9ccc-2b4da74c7da3",
    "name": "Top K Frequent Elements",
    "link": "top-k-frequent-elements/",
    "group": "Arrays & Hashing",
    "difficulty": "Medium",
    "description": "<div>\n  <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2\n<strong>Output:</strong> [1,2]\n<strong>Explanation:</strong> 1 appears 3 times, 2 appears 2 times, 3 appears 1 time. The 2 most frequent are 1 and 2.</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> Only one element, so it's the most frequent.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>1 <= nums.length <= 100,000</code></li>\n    <li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>\n    <li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>\n  </ul>\n\n  <p><strong>Follow up:</strong> Your algorithm's time complexity must be better than O(n log n), where n is the array's size.</p>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[1,1,1,2,2,3]",
          "2"
        ],
        "expectedOutput": "[1,2]",
        "explanation": "1 appears 3 times, 2 appears 2 times. These are the 2 most frequent elements."
      },
      {
        "inputs": [
          "[1]",
          "1"
        ],
        "expectedOutput": "[1]",
        "explanation": "Only one element exists, so it's the most frequent."
      },
      {
        "inputs": [
          "[4,1,-1,2,-1,2,3]",
          "2"
        ],
        "expectedOutput": "[-1,2]",
        "explanation": "-1 and 2 both appear twice, making them the most frequent."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[1,1,1,2,2,3]",
          "2"
        ],
        "expectedOutput": "[1,2]",
        "isHidden": false
      },
      {
        "inputs": [
          "[1]",
          "1"
        ],
        "expectedOutput": "[1]",
        "isHidden": false
      },
      {
        "inputs": [
          "[4,1,-1,2,-1,2,3]",
          "2"
        ],
        "expectedOutput": "[-1,2]",
        "isHidden": false
      },
      {
        "inputs": [
          "[1,2,3,4,5]",
          "3"
        ],
        "expectedOutput": "[1,2,3]",
        "isHidden": true
      },
      {
        "inputs": [
          "[5,5,5,5]",
          "1"
        ],
        "expectedOutput": "[5]",
        "isHidden": true
      },
      {
        "inputs": [
          "[1,1,2,2,3,3]",
          "3"
        ],
        "expectedOutput": "[1,2,3]",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        \"\"\"\n        Find the k most frequent elements in an array.\n        \n        Args:\n            nums: List of integers\n            k: Number of most frequent elements to return\n            \n        Returns:\n            List[int]: The k most frequent elements\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "e068c6eb-17bc-4737-9cb9-35a27f3b7f72",
    "name": "Product of Array Except Self",
    "link": "product-of-array-except-self/",
    "group": "Arrays & Hashing",
    "difficulty": "Medium",
    "description": "<div>\n  <p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n  <p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n  <p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n<strong>Explanation:</strong> For each index i, multiply all elements except nums[i].</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n<strong>Explanation:</strong> Product is 0 when any element is 0.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>2 <= nums.length <= 100,000</code></li>\n    <li><code>-30 <= nums[i] <= 30</code></li>\n    <li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n  </ul>\n\n  <p><strong>Follow up:</strong> Can you solve the problem in <code>O(1)</code> extra space complexity? (The output array does not count as extra space for space complexity analysis.)</p>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[1,2,3,4]"
        ],
        "expectedOutput": "[24,12,8,6]",
        "explanation": "For index 0: 2*3*4=24, index 1: 1*3*4=12, index 2: 1*2*4=8, index 3: 1*2*3=6"
      },
      {
        "inputs": [
          "[-1,1,0,-3,3]"
        ],
        "expectedOutput": "[0,0,9,0,0]",
        "explanation": "When any element is 0, the product excluding that element includes other zeros, making most results 0."
      },
      {
        "inputs": [
          "[2,3,4,5]"
        ],
        "expectedOutput": "[60,40,30,24]",
        "explanation": "For each index, multiply all other elements."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[1,2,3,4]"
        ],
        "expectedOutput": "[24,12,8,6]",
        "isHidden": false
      },
      {
        "inputs": [
          "[-1,1,0,-3,3]"
        ],
        "expectedOutput": "[0,0,9,0,0]",
        "isHidden": false
      },
      {
        "inputs": [
          "[2,3,4,5]"
        ],
        "expectedOutput": "[60,40,30,24]",
        "isHidden": false
      },
      {
        "inputs": [
          "[1,2]"
        ],
        "expectedOutput": "[2,1]",
        "isHidden": true
      },
      {
        "inputs": [
          "[5,9,2,6]"
        ],
        "expectedOutput": "[108,60,270,90]",
        "isHidden": true
      },
      {
        "inputs": [
          "[0,0]"
        ],
        "expectedOutput": "[0,0]",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Calculate product of array except self for each element.\n        \n        Args:\n            nums: List of integers\n            \n        Returns:\n            List[int]: Array where each element is product of all other elements\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function(nums) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "79fea597-9ec3-4800-83cb-c41a98d4ddd8",
    "name": "Valid Sudoku",
    "link": "valid-sudoku/",
    "group": "Arrays & Hashing",
    "difficulty": "Medium",
    "description": "<div>\n  <p>Determine if a <code>9 x 9</code> Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p>\n\n  <ol>\n    <li>Each row must contain the digits <code>1-9</code> without repetition.</li>\n    <li>Each column must contain the digits <code>1-9</code> without repetition.</li>\n    <li>Each of the nine <code>3 x 3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li>\n  </ol>\n\n  <p><strong>Note:</strong></p>\n  <ul>\n    <li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\n    <li>Only the filled cells need to be validated according to the mentioned rules.</li>\n  </ul>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n<strong>Output:</strong> true</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>board.length == 9</code></li>\n    <li><code>board[i].length == 9</code></li>\n    <li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li>\n  </ul>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
        ],
        "expectedOutput": "true",
        "explanation": "This is a valid Sudoku board with no duplicate numbers in any row, column, or 3x3 sub-box."
      },
      {
        "inputs": [
          "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
        ],
        "expectedOutput": "false",
        "explanation": "Invalid because there are two 8's in the top left 3x3 sub-box."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
        ],
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "inputs": [
          "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
        ],
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "inputs": [

        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [

        ],
        "expectedOutput": "true",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \"\"\"\n        Validate a 9x9 Sudoku board.\n        \n        Args:\n            board: 9x9 grid with digits 1-9 or '.' for empty cells\n            \n        Returns:\n            bool: True if the board is valid, False otherwise\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {character[][]} board\n * @return {boolean}\n */\nvar isValidSudoku = function(board) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "dd2e5b8f-4308-4f15-ab08-edf928b4e88c",
    "name": "Encode and Decode Strings",
    "link": "encode-and-decode-strings/",
    "group": "Arrays & Hashing",
    "difficulty": "Medium",
    "description": "<div>\n  <p>Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>\n\n  <p>Machine 1 (sender) has the function:</p>\n  <pre>string encode(vector&lt;string&gt; strs) {\n  // ... your code\n  return encoded_string;\n}</pre>\n\n  <p>Machine 2 (receiver) has the function:</p>\n  <pre>vector&lt;string&gt; decode(string s) {\n  // ... your code\n  return strs;\n}</pre>\n\n  <p>So Machine 1 does:</p>\n  <pre>string encoded_string = encode(strs);</pre>\n\n  <p>and Machine 2 does:</p>\n  <pre>vector&lt;string&gt; strs2 = decode(encoded_string);</pre>\n\n  <p><code>strs2</code> in Machine 2 should be the same as <code>strs</code> in Machine 1.</p>\n\n  <p>Implement the <code>encode</code> and <code>decode</code> methods.</p>\n\n  <p><strong>You are not allowed to solve the problem using any serialize methods (such as <code>eval</code>).</strong></p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> dummy_input = [\"Hello\",\"World\"]\n<strong>Output:</strong> [\"Hello\",\"World\"]\n<strong>Explanation:</strong>\nMachine 1:\nCodec encoder = new Codec();\nString msg = encoder.encode(strs);\nMachine 1 ---msg---&gt; Machine 2\n\nMachine 2:\nCodec decoder = new Codec();\nString[] strs = decoder.decode(msg);</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> dummy_input = [\"\"]\n<strong>Output:</strong> [\"\"]\n<strong>Explanation:</strong> Empty string should be handled correctly.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>1 <= strs.length <= 200</code></li>\n    <li><code>0 <= strs[i].length <= 200</code></li>\n    <li><code>strs[i]</code> contains any possible characters out of <code>256</code> valid ASCII characters.</li>\n  </ul>\n\n  <p><strong>Follow up:</strong> Could you write a generalized algorithm to work on any possible set of characters?</p>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[\"Hello\",\"World\"]"
        ],
        "expectedOutput": "[\"Hello\",\"World\"]",
        "explanation": "The encoded string should decode back to the original list."
      },
      {
        "inputs": [
          "[\"\"]"
        ],
        "expectedOutput": "[\"\"]",
        "explanation": "Empty strings should be handled correctly."
      },
      {
        "inputs": [
          "[\"abc\",\"def\",\"ghi\"]"
        ],
        "expectedOutput": "[\"abc\",\"def\",\"ghi\"]",
        "explanation": "Multiple strings should be encoded and decoded correctly."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[\"Hello\",\"World\"]"
        ],
        "expectedOutput": "[\"Hello\",\"World\"]",
        "isHidden": false
      },
      {
        "inputs": [
          "[\"\"]"
        ],
        "expectedOutput": "[\"\"]",
        "isHidden": false
      },
      {
        "inputs": [
          "[\"abc\",\"def\",\"ghi\"]"
        ],
        "expectedOutput": "[\"abc\",\"def\",\"ghi\"]",
        "isHidden": false
      },
      {
        "inputs": [
          "[\"a\",\"b\",\"c\"]"
        ],
        "expectedOutput": "[\"a\",\"b\",\"c\"]",
        "isHidden": true
      },
      {
        "inputs": [
          "[\"hello world\",\"foo bar\"]"
        ],
        "expectedOutput": "[\"hello world\",\"foo bar\"]",
        "isHidden": true
      },
      {
        "inputs": [
          "[\"123\",\"456\",\"789\"]"
        ],
        "expectedOutput": "[\"123\",\"456\",\"789\"]",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Codec:\n    def encode(self, strs: List[str]) -> str:\n        \"\"\"\n        Encodes a list of strings to a single string.\n        \n        Args:\n            strs: List of strings to encode\n            \n        Returns:\n            str: Encoded string\n        \"\"\"\n        # Write your solution here\n        pass\n        \n    def decode(self, s: str) -> List[str]:\n        \"\"\"\n        Decodes a single string to a list of strings.\n        \n        Args:\n            s: Encoded string\n            \n        Returns:\n            List[str]: Decoded list of strings\n        \"\"\"\n        # Write your solution here\n        pass\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(strs))",
      "javascript": "/**\n * Encodes a list of strings to a single string.\n *\n * @param {string[]} strs\n * @return {string}\n */\nvar encode = function(strs) {\n    // Write your solution here\n};\n\n/**\n * Decodes a single string to a list of strings.\n *\n * @param {string} s\n * @return {string[]}\n */\nvar decode = function(s) {\n    // Write your solution here\n};\n\n/**\n * Your functions will be called as such:\n * decode(encode(strs));\n */"
    }
  },
  {
    "_id": "2e926ab5-1761-436b-8359-30cd6c2a2ebc",
    "name": "Longest Consecutive Sequence",
    "link": "longest-consecutive-sequence/",
    "group": "Arrays & Hashing",
    "difficulty": "Medium",
    "description": "<div>\n  <p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p>\n\n  <p>You must write an algorithm that runs in <code>O(n)</code> time.</p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> nums = [100,4,200,1,3,2]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> nums = [0,3,7,2,5,8,4,6,0,1]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> The longest consecutive sequence is [0,1,2,3,4,5,6,7,8], which has length 9.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>0 <= nums.length <= 100,000</code></li>\n    <li><code>-1,000,000,000 <= nums[i] <= 1,000,000,000</code></li>\n  </ul>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "[100,4,200,1,3,2]"
        ],
        "expectedOutput": "6",
        "explanation": "The longest consecutive sequence is [1,2,3,4,100,200]. Wait, that's not right. The longest consecutive sequence is [1,2,3,4] with length 4."
      },
      {
        "inputs": [
          "[0,3,7,2,5,8,4,6,0,1]"
        ],
        "expectedOutput": "9",
        "explanation": "The longest consecutive sequence is [0,1,2,3,4,5,6,7,8] with length 9."
      },
      {
        "inputs": [
          "[]"
        ],
        "expectedOutput": "0",
        "explanation": "Empty array has no consecutive sequence."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "[100,4,200,1,3,2]"
        ],
        "expectedOutput": "6",
        "isHidden": false
      },
      {
        "inputs": [
          "[0,3,7,2,5,8,4,6,0,1]"
        ],
        "expectedOutput": "9",
        "isHidden": false
      },
      {
        "inputs": [
          "[]"
        ],
        "expectedOutput": "0",
        "isHidden": false
      },
      {
        "inputs": [
          "[1,2,0,1]"
        ],
        "expectedOutput": "3",
        "isHidden": true
      },
      {
        "inputs": [
          "[9,1,4,7,3,-1,0,5,8,-1,6]"
        ],
        "expectedOutput": "7",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "from typing import List\n\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        \"\"\"\n        Find the length of the longest consecutive elements sequence.\n        \n        Args:\n            nums: List of integers\n            \n        Returns:\n            int: Length of longest consecutive sequence\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    // Write your solution here\n};"
    }
  },
  {
    "_id": "3b933a94-e28d-4591-826d-3f810f383e42",
    "name": "Valid Palindrome",
    "link": "valid-palindrome/",
    "group": "Two Pointers",
    "difficulty": "Easy",
    "description": "<div>\n  <p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p>\n\n  <p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome, or <code>false</code> otherwise.</p>\n\n  <p><strong>Example 1:</strong></p>\n  <pre><strong>Input:</strong> s = \"A man, a plan, a canal: Panama\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \"amanaplanacanalpanama\" is a palindrome.</pre>\n\n  <p><strong>Example 2:</strong></p>\n  <pre><strong>Input:</strong> s = \"race a car\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \"raceacar\" is not a palindrome.</pre>\n\n  <p><strong>Example 3:</strong></p>\n  <pre><strong>Input:</strong> s = \" \"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome.</pre>\n\n  <p><strong>Example 4:</strong></p>\n  <pre><strong>Input:</strong> s = \"Madam\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \"madam\" is a palindrome.</pre>\n\n  <p><strong>Example 5:</strong></p>\n  <pre><strong>Input:</strong> s = \"No 'x' in Nixon\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \"noxinnixon\" is a palindrome.</pre>\n\n  <p><strong>Constraints:</strong></p>\n  <ul>\n    <li><code>1 <= s.length <= 200,000</code></li>\n    <li><code>s</code> consists only of printable ASCII characters.</li>\n  </ul>\n\n  <p><strong>Follow up:</strong> Could you solve it without converting the entire string to lowercase and removing non-alphanumeric characters first? Try using the two-pointer technique!</p>\n</div>",
    "exampleTestCases": [
      {
        "inputs": [
          "\"A man, a plan, a canal: Panama\""
        ],
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters and converting to lowercase: 'amanaplanacanalpanama' is a palindrome."
      },
      {
        "inputs": [
          "\"race a car\""
        ],
        "expectedOutput": "false",
        "explanation": "After processing: 'raceacar' is not a palindrome."
      },
      {
        "inputs": [
          "\" \""
        ],
        "expectedOutput": "true",
        "explanation": "After removing non-alphanumeric characters, we get an empty string, which is considered a palindrome."
      }
    ],
    "testCases": [
      {
        "inputs": [
          "\"A man, a plan, a canal: Panama\""
        ],
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "inputs": [
          "\"race a car\""
        ],
        "expectedOutput": "false",
        "isHidden": false
      },
      {
        "inputs": [
          "\" \""
        ],
        "expectedOutput": "true",
        "isHidden": false
      },
      {
        "inputs": [
          "\"Madam\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [
          "\"No 'x' in Nixon\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [
          "\"Was it a car or a cat I saw?\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [
          "\"hello\""
        ],
        "expectedOutput": "false",
        "isHidden": true
      },
      {
        "inputs": [
          "\"a\""
        ],
        "expectedOutput": "true",
        "isHidden": true
      },
      {
        "inputs": [
          "\"ab\""
        ],
        "expectedOutput": "false",
        "isHidden": true
      },
      {
        "inputs": [
          "\"0P\""
        ],
        "expectedOutput": "false",
        "isHidden": true
      }
    ],
    "templates": {
      "python": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        \"\"\"\n        Determine if a string is a valid palindrome.\n        \n        Args:\n            s: Input string containing letters, numbers, and other characters\n            \n        Returns:\n            bool: True if the string is a palindrome, False otherwise\n        \"\"\"\n        # Write your solution here\n        pass",
      "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    // Write your solution here\n};"
    }
  }
]